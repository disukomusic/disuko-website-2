// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJAowqBqcWtGU49FNparet
// Component: PKxIjSWuK-D
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header2 from "../../Header2"; // plasmic-import: rUSB5x1lbq/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: CMDBvOhaI4s/codeComponent
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent

import { useScreenVariants as useScreenVariantshOjvR8SK0BhqS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HOjvR8sK0bhqS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_disuko_website.module.css"; // plasmic-import: wJAowqBqcWtGU49FNparet/projectcss
import sty from "./PlasmicMusic.module.css"; // plasmic-import: PKxIjSWuK-D/css

export type PlasmicMusic__VariantMembers = {};
export type PlasmicMusic__VariantsArgs = {};
type VariantPropType = keyof PlasmicMusic__VariantsArgs;
export const PlasmicMusic__VariantProps = new Array<VariantPropType>();

export type PlasmicMusic__ArgsType = {};
type ArgPropType = keyof PlasmicMusic__ArgsType;
export const PlasmicMusic__ArgProps = new Array<ArgPropType>();

export type PlasmicMusic__OverridesType = {
  root2?: p.Flex<"div">;
  header2?: p.Flex<typeof Header2>;
  main?: p.Flex<"div">;
  content?: p.Flex<"div">;
  about?: p.Flex<"div">;
  iframe?: p.Flex<typeof Iframe>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultMusicProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicMusic__RenderFunc(props: {
  variants: PlasmicMusic__VariantsArgs;
  args: PlasmicMusic__ArgsType;
  overrides: PlasmicMusic__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshOjvR8SK0BhqS()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMusic.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMusic.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMusic.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root2"}
          data-plasmic-override={overrides.root2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root2
          )}
        >
          <Header2
            data-plasmic-name={"header2"}
            data-plasmic-override={overrides.header2}
            className={classNames("__wab_instance", sty.header2)}
          />

          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <div
                data-plasmic-name={"about"}
                data-plasmic-override={overrides.about}
                className={classNames(projectcss.all, sty.about)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fmzB)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aqeve
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"music"}
                      </span>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cDgnV
                    )}
                  >
                    {
                      "i've been producing music since around 2015. i much experience sequencing and producing edm in FL Studio, as well as setting up lighting and live shows in Ableton Live."
                    }
                  </div>
                </div>
              </div>
            </p.Stack>
          </div>

          {(
            hasVariant(globalVariants, "screen", "tabletOrSmaller")
              ? true
              : true
          ) ? (
            <Iframe
              data-plasmic-name={"iframe"}
              data-plasmic-override={overrides.iframe}
              className={classNames("__wab_instance", sty.iframe)}
              preview={true}
              src={"https://disuko.bandcamp.com" as const}
            />
          ) : null}

          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={
              hasVariant(globalVariants, "screen", "tabletOrSmaller")
                ? ("disuko.bandcamp.com" as const)
                : undefined
            }
            platform={"nextjs"}
            target={
              hasVariant(globalVariants, "screen", "tabletOrSmaller")
                ? ("_blank" as const)
                : undefined
            }
          >
            {(
              hasVariant(globalVariants, "screen", "tabletOrSmaller")
                ? true
                : true
            ) ? (
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={
                  hasVariant(globalVariants, "screen", "tabletOrSmaller")
                    ? {
                        src: "/plasmic/disuko_website/images/image20220305130636Png.png",
                        fullWidth: 985,
                        fullHeight: 588,
                        aspectRatio: undefined
                      }
                    : undefined
                }
              />
            ) : null}
          </p.PlasmicLink>

          <div className={classNames(projectcss.all, sty.freeBox___0Sgqm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cku2C
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFF" }}
                >
                  {"music videos"}
                </span>
              </React.Fragment>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__syABh
              )}
            >
              {
                "alongside my music, I sometimes release music videos put together in blender or after effects! more video and motion graphics work can be found in the film/video tab."
              }
            </div>
          </div>

          <YouTube
            className={classNames("__wab_instance", sty.youTube__oxDy5)}
            modestbranding={false}
            rel={false}
            videoId={"TTqsqZ1fX14" as const}
          />

          <YouTube
            className={classNames("__wab_instance", sty.youTube__w4CbW)}
            modestbranding={false}
            rel={false}
            videoId={"G0yRJX5B-dY" as const}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root2: [
    "root2",
    "header2",
    "main",
    "content",
    "about",
    "iframe",
    "link",
    "img"
  ],
  header2: ["header2"],
  main: ["main", "content", "about"],
  content: ["content", "about"],
  about: ["about"],
  iframe: ["iframe"],
  link: ["link", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root2: "div";
  header2: typeof Header2;
  main: "div";
  content: "div";
  about: "div";
  iframe: typeof Iframe;
  link: "a";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMusic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMusic__VariantsArgs;
    args?: PlasmicMusic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMusic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMusic__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMusic__ArgProps,
          internalVariantPropNames: PlasmicMusic__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMusic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicMusic";
  } else {
    func.displayName = `PlasmicMusic.${nodeName}`;
  }
  return func;
}

export const PlasmicMusic = Object.assign(
  // Top-level PlasmicMusic renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    header2: makeNodeComponent("header2"),
    main: makeNodeComponent("main"),
    content: makeNodeComponent("content"),
    about: makeNodeComponent("about"),
    iframe: makeNodeComponent("iframe"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMusic
    internalVariantProps: PlasmicMusic__VariantProps,
    internalArgProps: PlasmicMusic__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMusic;
/* prettier-ignore-end */
