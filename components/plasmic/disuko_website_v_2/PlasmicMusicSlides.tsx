// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bsHvoheJaXyaeWhnCxRakT
// Component: 1BhlLFOXJu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantswajuQ4R1DeAga } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WajuQ4R1DeAga/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_disuko_website_v_2.module.css"; // plasmic-import: bsHvoheJaXyaeWhnCxRakT/projectcss
import sty from "./PlasmicMusicSlides.module.css"; // plasmic-import: 1BhlLFOXJu/css

export type PlasmicMusicSlides__VariantMembers = {};
export type PlasmicMusicSlides__VariantsArgs = {};
type VariantPropType = keyof PlasmicMusicSlides__VariantsArgs;
export const PlasmicMusicSlides__VariantProps = new Array<VariantPropType>();

export type PlasmicMusicSlides__ArgsType = {};
type ArgPropType = keyof PlasmicMusicSlides__ArgsType;
export const PlasmicMusicSlides__ArgProps = new Array<ArgPropType>();

export type PlasmicMusicSlides__OverridesType = {
  root?: p.Flex<typeof Slider>;
  spotify?: p.Flex<"div">;
  appleMusic?: p.Flex<"div">;
  amazon?: p.Flex<"div">;
  youtubeMusic?: p.Flex<"div">;
  soundcloud?: p.Flex<"div">;
  bandcamp?: p.Flex<"div">;
};

export interface DefaultMusicSlidesProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicMusicSlides__RenderFunc(props: {
  variants: PlasmicMusicSlides__VariantsArgs;
  args: PlasmicMusicSlides__ArgsType;
  overrides: PlasmicMusicSlides__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswajuQ4R1DeAga()
  });

  return (
    <Slider
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      accessibility={true}
      adaptiveHeight={true}
      arrows={true}
      autoplay={true}
      autoplaySpeed={3000 as const}
      centerMode={true}
      centerPadding={"50px" as const}
      className={classNames("__wab_instance", sty.root)}
      dots={true}
      draggable={true}
      easing={"linear" as const}
      fade={false}
      focusOnSelect={false}
      infinite={true}
      pauseOnFocus={true}
      rows={1 as const}
      slidesPerRow={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? (1 as const)
          : (3 as const)
      }
      slidesToScroll={1 as const}
      slidesToShow={1 as const}
      swipeToSlide={true}
      useCSS={true}
      useTransform={true}
      variableWidth={false}
      vertical={
        hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
      }
    >
      {true ? (
        <div
          data-plasmic-name={"spotify"}
          data-plasmic-override={overrides.spotify}
          className={classNames(projectcss.all, sty.spotify)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__re43C)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yZeKz
                )}
              >
                {"spotify"}
              </div>

              <Embed
                className={classNames("__wab_instance", sty.embedHtml__s4YTg)}
                code={
                  '<iframe style="border-radius:12px" src="https://open.spotify.com/embed/artist/7miowOQruHb1GpKBlV4tjl?utm_source=generator" width="100%" height="380" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>' as const
                }
              />
            </div>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"appleMusic"}
          data-plasmic-override={overrides.appleMusic}
          className={classNames(projectcss.all, sty.appleMusic)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__iLax0)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sURj
                )}
              >
                {"apple music"}
              </div>

              <Embed
                className={classNames("__wab_instance", sty.embedHtml__mxml1)}
                code={
                  '<iframe allow="autoplay *; encrypted-media *; fullscreen *; clipboard-write" frameborder="0" height="380" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/interdimensional-ice-cream-parlor/1602570432"></iframe>' as const
                }
              />
            </div>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"amazon"}
          data-plasmic-override={overrides.amazon}
          className={classNames(projectcss.all, sty.amazon)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___5EZlx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8ZpMh
                )}
              >
                {"amazon music"}
              </div>

              <Embed
                className={classNames("__wab_instance", sty.embedHtml___83GKz)}
                code={
                  "<iframe id='AmazonMusicEmbedB084D91746' src='https://music.amazon.com/embed/B084D91746/?id=o5h7CyRP1M&marketplaceId=ATVPDKIKX0DER&musicTerritory=US' width='100%' height='380px' style='border:1px solid rgba(0, 0, 0, 0.12);max-width:'></iframe>" as const
                }
              />
            </div>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"youtubeMusic"}
          data-plasmic-override={overrides.youtubeMusic}
          className={classNames(projectcss.all, sty.youtubeMusic)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wubDz)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y0F3
                )}
              >
                {"youtube music"}
              </div>

              <Embed
                className={classNames("__wab_instance", sty.embedHtml__f1W)}
                code={
                  '<iframe width=100% height="380" src="https://www.youtube.com/embed/videoseries?list=PLaByeaD3slVDFQ34W31Na8LOPNi9aGzjK" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>' as const
                }
              />
            </div>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"soundcloud"}
          data-plasmic-override={overrides.soundcloud}
          className={classNames(projectcss.all, sty.soundcloud)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__qg9Kp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tcYaR
                )}
              >
                {"soundcloud"}
              </div>

              <Embed
                className={classNames("__wab_instance", sty.embedHtml___9ZYaq)}
                code={
                  '<iframe width="100%" height="364" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1333609915&color=%23e18ee1&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"></iframe><div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"><a href="https://soundcloud.com/disukomusic" title="Disuko" target="_blank" style="color: #cccccc; text-decoration: none;">Disuko</a> Â· <a href="https://soundcloud.com/disukomusic/celestial-ballad-thank-you-for-1k-on-youtube" title="CELESTIAL BALLAD (thank you for 1k on youtube)" target="_blank" style="color: #cccccc; text-decoration: none;">CELESTIAL BALLAD (thank you for 1k on youtube)</a></div>' as const
                }
              />
            </div>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"bandcamp"}
          data-plasmic-override={overrides.bandcamp}
          className={classNames(projectcss.all, sty.bandcamp)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__vElwC)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n69Js
                )}
              >
                {"bandcamp"}
              </div>

              <Embed
                className={classNames("__wab_instance", sty.embedHtml__a9Ci0)}
                code={
                  '<iframe style="border: 0; width: 266px; height: 380px;" src="https://bandcamp.com/EmbeddedPlayer/track=1963547418/size=large/bgcol=ffffff/linkcol=7137dc/tracklist=false/transparent=true/" seamless><a href="https://disuko.bandcamp.com/track/disukos-spooktacular-annual-semi-bi-weekly-mega-halloween-rave-for-ghouls-and-gremlins-of-all-dimensional-planes">Disuko&#39;s Spooktacular Annual Semi-Bi-Weekly MEGA HALLOWEEN RAVE (for ghouls and gremlins of all dimensional planes) by disuko</a></iframe>' as const
                }
              />
            </div>
          ) : null}
        </div>
      ) : null}
    </Slider>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "spotify",
    "appleMusic",
    "amazon",
    "youtubeMusic",
    "soundcloud",
    "bandcamp"
  ],
  spotify: ["spotify"],
  appleMusic: ["appleMusic"],
  amazon: ["amazon"],
  youtubeMusic: ["youtubeMusic"],
  soundcloud: ["soundcloud"],
  bandcamp: ["bandcamp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Slider;
  spotify: "div";
  appleMusic: "div";
  amazon: "div";
  youtubeMusic: "div";
  soundcloud: "div";
  bandcamp: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMusicSlides__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMusicSlides__VariantsArgs;
    args?: PlasmicMusicSlides__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMusicSlides__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMusicSlides__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMusicSlides__ArgProps,
          internalVariantPropNames: PlasmicMusicSlides__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMusicSlides__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMusicSlides";
  } else {
    func.displayName = `PlasmicMusicSlides.${nodeName}`;
  }
  return func;
}

export const PlasmicMusicSlides = Object.assign(
  // Top-level PlasmicMusicSlides renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    spotify: makeNodeComponent("spotify"),
    appleMusic: makeNodeComponent("appleMusic"),
    amazon: makeNodeComponent("amazon"),
    youtubeMusic: makeNodeComponent("youtubeMusic"),
    soundcloud: makeNodeComponent("soundcloud"),
    bandcamp: makeNodeComponent("bandcamp"),

    // Metadata about props expected for PlasmicMusicSlides
    internalVariantProps: PlasmicMusicSlides__VariantProps,
    internalArgProps: PlasmicMusicSlides__ArgProps
  }
);

export default PlasmicMusicSlides;
/* prettier-ignore-end */
