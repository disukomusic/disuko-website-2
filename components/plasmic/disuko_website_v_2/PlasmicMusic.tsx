// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bsHvoheJaXyaeWhnCxRakT
// Component: FBEYeLCsKl6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: _De9lHvhQM/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import Footer from "../../Footer"; // plasmic-import: phAOjgqEmd/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_disuko_website_v_2.module.css"; // plasmic-import: bsHvoheJaXyaeWhnCxRakT/projectcss
import sty from "./PlasmicMusic.module.css"; // plasmic-import: FBEYeLCsKl6/css

export type PlasmicMusic__VariantMembers = {};
export type PlasmicMusic__VariantsArgs = {};
type VariantPropType = keyof PlasmicMusic__VariantsArgs;
export const PlasmicMusic__VariantProps = new Array<VariantPropType>();

export type PlasmicMusic__ArgsType = {};
type ArgPropType = keyof PlasmicMusic__ArgsType;
export const PlasmicMusic__ArgProps = new Array<ArgPropType>();

export type PlasmicMusic__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  main?: p.Flex<"div">;
  reveal?: p.Flex<typeof Reveal>;
  greeting7?: p.Flex<"div">;
  greeting8?: p.Flex<"div">;
  greeting9?: p.Flex<"div">;
  greeting10?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultMusicProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicMusic__RenderFunc(props: {
  variants: PlasmicMusic__VariantsArgs;
  args: PlasmicMusic__ArgsType;
  overrides: PlasmicMusic__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicMusic.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMusic.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMusic.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicMusic.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicMusic.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicMusic.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicMusic.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicMusic.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicMusic.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              hasGap={true}
              className={classNames(projectcss.all, sty.main)}
            >
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                cascade={true}
                className={classNames("__wab_instance", sty.reveal)}
                direction={"up" as const}
                effect={"slide" as const}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__yb5C)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kzq5
                    )}
                  >
                    {"check out my music!"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xWogX
                    )}
                  >
                    {
                      "i produce electronic music and also dj! i like making music with high energy and cute sounds! my main genes range from kawaii future bass to hardcore (and more). my inspirations include kawaii future bass producers like snail's house, hardcore producers like camellia, and rhythm game producers like tanger. i hope you enjoy listening to my music! "
                    }
                  </div>
                </div>
              </Reveal>

              <div className={classNames(projectcss.all, sty.freeBox__a1LL)}>
                <div className={classNames(projectcss.all, sty.freeBox__r9R4U)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5SwEn
                    )}
                  >
                    {"latest release"}
                  </div>

                  <Tilt
                    className={classNames("__wab_instance", sty.tilt___6SVvz)}
                    glareEnable={false}
                    tiltMaxAngleX={10 as const}
                    tiltMaxAngleY={10 as const}
                    tiltReverse={true}
                    trackOnWindow={false}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__ezl1
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/watch?v=dGwWZ-y0VbU" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__govQ
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__im7MP)}
                          displayHeight={"219px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/untitled1Jpg.jpeg",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qcUc
                        )}
                      >
                        <div
                          data-plasmic-name={"greeting7"}
                          data-plasmic-override={overrides.greeting7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.greeting7
                          )}
                        >
                          {"dino hop"}
                        </div>

                        <div
                          data-plasmic-name={"greeting8"}
                          data-plasmic-override={overrides.greeting8}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.greeting8
                          )}
                        >
                          {
                            "this new color house track is off of the Spectrum compilation from Antithesys Records!"
                          }
                        </div>
                      </div>
                    </p.PlasmicLink>
                  </Tilt>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__jTn8A)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qyVwN
                    )}
                  >
                    {"past releases"}
                  </div>

                  <Tilt
                    className={classNames("__wab_instance", sty.tilt___6O9HJ)}
                    glareEnable={false}
                    tiltMaxAngleX={10 as const}
                    tiltMaxAngleY={10 as const}
                    tiltReverse={true}
                    trackOnWindow={false}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__qWbzG
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/watch?v=dGwWZ-y0VbU" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z94Gr
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__yADdN)}
                          displayHeight={"219px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/logo2023Png.png",
                            fullWidth: 2000,
                            fullHeight: 2000,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pjlHe
                        )}
                      >
                        <div
                          data-plasmic-name={"greeting9"}
                          data-plasmic-override={overrides.greeting9}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.greeting9
                          )}
                        >
                          {"under contruction"}
                        </div>

                        <div
                          data-plasmic-name={"greeting10"}
                          data-plasmic-override={overrides.greeting10}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.greeting10
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "soon you'll be able to find all my music on this page! for now, click the image to go to  my spotify page! (or check out my "
                              }
                            </React.Fragment>
                            {
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link___71RWc
                                )}
                                component={Link}
                                href={"disuko.gay/links" as const}
                                platform={"nextjs"}
                              >
                                {"links "}
                              </p.PlasmicLink>
                            }
                            <React.Fragment>{"page)"}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </div>
                    </p.PlasmicLink>
                  </Tilt>
                </div>
              </div>

              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer)}
              />
            </p.Stack>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "main",
    "reveal",
    "greeting7",
    "greeting8",
    "greeting9",
    "greeting10",
    "footer"
  ],
  navbar: ["navbar"],
  main: [
    "main",
    "reveal",
    "greeting7",
    "greeting8",
    "greeting9",
    "greeting10",
    "footer"
  ],
  reveal: ["reveal"],
  greeting7: ["greeting7"],
  greeting8: ["greeting8"],
  greeting9: ["greeting9"],
  greeting10: ["greeting10"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  main: "div";
  reveal: typeof Reveal;
  greeting7: "div";
  greeting8: "div";
  greeting9: "div";
  greeting10: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMusic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMusic__VariantsArgs;
    args?: PlasmicMusic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMusic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMusic__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMusic__ArgProps,
          internalVariantPropNames: PlasmicMusic__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMusic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMusic";
  } else {
    func.displayName = `PlasmicMusic.${nodeName}`;
  }
  return func;
}

export const PlasmicMusic = Object.assign(
  // Top-level PlasmicMusic renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    reveal: makeNodeComponent("reveal"),
    greeting7: makeNodeComponent("greeting7"),
    greeting8: makeNodeComponent("greeting8"),
    greeting9: makeNodeComponent("greeting9"),
    greeting10: makeNodeComponent("greeting10"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicMusic
    internalVariantProps: PlasmicMusic__VariantProps,
    internalArgProps: PlasmicMusic__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - music 🌸",
      description:
        "~i produce electronic music and also DJ! i like making music with high energy and cute sounds. my genres range from kawaii future bass to hardcore!",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/links"
    }
  }
);

export default PlasmicMusic;
/* prettier-ignore-end */
