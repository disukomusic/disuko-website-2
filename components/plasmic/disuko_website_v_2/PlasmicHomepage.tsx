// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bsHvoheJaXyaeWhnCxRakT
// Component: 4IpupZoDuWPh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: _De9lHvhQM/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import { TimelineWrapper } from "@plasmicpkgs/react-twitter-widgets"; // plasmic-import: x2j0abJR_t/codeComponent
import Footer from "../../Footer"; // plasmic-import: phAOjgqEmd/component

import { useScreenVariants as useScreenVariantswajuQ4R1DeAga } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WajuQ4R1DeAga/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_disuko_website_v_2.module.css"; // plasmic-import: bsHvoheJaXyaeWhnCxRakT/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 4IpupZoDuWPh/css

import YoutubeSvgrepoComsvg2Icon from "./icons/PlasmicIcon__YoutubeSvgrepoComsvg2"; // plasmic-import: FZLmoPLrrn/icon
import InstagramsvgIcon from "./icons/PlasmicIcon__Instagramsvg"; // plasmic-import: y1Pbni4fXg/icon
import TwittersvgIcon from "./icons/PlasmicIcon__Twittersvg"; // plasmic-import: hANZUCS7hj/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  reveal?: p.Flex<typeof Reveal>;
  columns?: p.Flex<"div">;
  greeting?: p.Flex<"div">;
  greeting2?: p.Flex<"div">;
  socials?: p.Flex<"div">;
  youtube?: p.Flex<"a"> & Partial<LinkProps>;
  instagram?: p.Flex<"a"> & Partial<LinkProps>;
  twitter?: p.Flex<"a"> & Partial<LinkProps>;
  timeline?: p.Flex<typeof TimelineWrapper>;
  greeting3?: p.Flex<"div">;
  greeting4?: p.Flex<"div">;
  greeting5?: p.Flex<"div">;
  greeting6?: p.Flex<"div">;
  greeting7?: p.Flex<"div">;
  greeting8?: p.Flex<"div">;
  greeting9?: p.Flex<"div">;
  greeting10?: p.Flex<"div">;
  greeting15?: p.Flex<"div">;
  greeting16?: p.Flex<"div">;
  greeting17?: p.Flex<"div">;
  greeting18?: p.Flex<"div">;
  greeting11?: p.Flex<"div">;
  greeting12?: p.Flex<"div">;
  greeting13?: p.Flex<"div">;
  greeting14?: p.Flex<"div">;
  contact?: p.Flex<"div">;
  mail?: p.Flex<"a"> & Partial<LinkProps>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswajuQ4R1DeAga()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fu4Gi)}
            >
              {true ? (
                <Reveal
                  data-plasmic-name={"reveal"}
                  data-plasmic-override={overrides.reveal}
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal)}
                  direction={"up" as const}
                  effect={"slide" as const}
                  triggerOnce={true}
                >
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___3Bk84)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___996D
                          )}
                        >
                          <Tilt
                            className={classNames(
                              "__wab_instance",
                              sty.tilt__n8FhI
                            )}
                            glareEnable={false}
                            tiltEnable={false}
                            tiltMaxAngleX={10 as const}
                            tiltMaxAngleY={10 as const}
                            tiltReverse={true}
                          >
                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aEtbN
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__smDm6)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("auto" as const)
                                      : ("286px" as const)
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"none" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"100%" as const}
                                  loading={"lazy" as const}
                                  src={{
                                    src: "/plasmic/disuko_website_v_2/images/_3132140498145789395868877228925067285650003Njpg.jpeg",
                                    fullWidth: 1080,
                                    fullHeight: 810,
                                    aspectRatio: undefined
                                  }}
                                />

                                <div
                                  data-plasmic-name={"greeting"}
                                  data-plasmic-override={overrides.greeting}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.greeting
                                  )}
                                >
                                  {"hi there!"}
                                </div>

                                <div
                                  data-plasmic-name={"greeting2"}
                                  data-plasmic-override={overrides.greeting2}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.greeting2
                                  )}
                                >
                                  {
                                    "i'm disuko, i love all forms of digital media and aim to express myself through music, videography, and design. i hope you enjoy my work!"
                                  }
                                </div>

                                <div
                                  data-plasmic-name={"socials"}
                                  data-plasmic-override={overrides.socials}
                                  className={classNames(
                                    projectcss.all,
                                    sty.socials
                                  )}
                                >
                                  <p.PlasmicLink
                                    data-plasmic-name={"youtube"}
                                    data-plasmic-override={overrides.youtube}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.youtube
                                    )}
                                    component={Link}
                                    href={"https://youtube.com/disuko" as const}
                                    platform={"nextjs"}
                                    title={"youtube" as const}
                                  >
                                    <YoutubeSvgrepoComsvg2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__uDscw
                                      )}
                                      role={"img"}
                                    />
                                  </p.PlasmicLink>

                                  <p.PlasmicLink
                                    data-plasmic-name={"instagram"}
                                    data-plasmic-override={overrides.instagram}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.instagram
                                    )}
                                    component={Link}
                                    href={
                                      "https://instagram.com/disukomusic" as const
                                    }
                                    platform={"nextjs"}
                                    title={"instagram" as const}
                                  >
                                    <InstagramsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hsIOy
                                      )}
                                      role={"img"}
                                    />
                                  </p.PlasmicLink>

                                  <p.PlasmicLink
                                    data-plasmic-name={"twitter"}
                                    data-plasmic-override={overrides.twitter}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.twitter
                                    )}
                                    component={Link}
                                    href={
                                      "https://twitter.com/disukomusic" as const
                                    }
                                    platform={"nextjs"}
                                    title={"twitter" as const}
                                  >
                                    <TwittersvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___22AmV
                                      )}
                                      role={"img"}
                                    />
                                  </p.PlasmicLink>
                                </div>
                              </div>
                            ) : null}
                          </Tilt>

                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <TimelineWrapper
                              data-plasmic-name={"timeline"}
                              data-plasmic-override={overrides.timeline}
                              chrome={["nofooter"]}
                              className={classNames(
                                "__wab_instance",
                                sty.timeline
                              )}
                              tweetLimit={1 as const}
                              url={"https://twitter.com/disukomusic" as const}
                            />
                          ) : null}
                        </div>
                      ) : null}
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__dIbkw
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___1NhLy
                        )}
                      >
                        <Tilt
                          className={classNames(
                            "__wab_instance",
                            sty.tilt__bOtSg
                          )}
                          glareEnable={false}
                          tiltMaxAngleX={10 as const}
                          tiltMaxAngleY={10 as const}
                          tiltReverse={true}
                          trackOnWindow={false}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__ysjXi
                              )}
                              component={Link}
                              href={`/music`}
                              platform={"nextjs"}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hv0Bo
                                  )}
                                >
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__tSjvo)}
                                    displayHeight={"100%" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"100%" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"100%" as const}
                                    loading={"lazy" as const}
                                    src={{
                                      src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                      fullWidth: 640,
                                      fullHeight: 640,
                                      aspectRatio: undefined
                                    }}
                                  />
                                </div>
                              ) : null}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2G9XT
                                )}
                              >
                                <div
                                  data-plasmic-name={"greeting3"}
                                  data-plasmic-override={overrides.greeting3}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.greeting3
                                  )}
                                >
                                  {"music"}
                                </div>

                                <div
                                  data-plasmic-name={"greeting4"}
                                  data-plasmic-override={overrides.greeting4}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.greeting4
                                  )}
                                >
                                  {
                                    "i release all kinds of music on spotify and other platforms!"
                                  }
                                </div>
                              </div>
                            </p.PlasmicLink>
                          ) : null}
                        </Tilt>

                        <Tilt
                          className={classNames(
                            "__wab_instance",
                            sty.tilt__lPlMm
                          )}
                          glareEnable={false}
                          tiltMaxAngleX={10 as const}
                          tiltMaxAngleY={10 as const}
                          tiltReverse={true}
                          trackOnWindow={false}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___41QBa
                            )}
                            component={Link}
                            href={"https://youtube.com/disuko" as const}
                            platform={"nextjs"}
                            target={"_blank" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7LaZ
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__z3Ktm)}
                                displayHeight={"100%" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/disuko_website_v_2/images/videoScreenshotYouTubeMyTop5AudioGearfor2023055Jpg.jpeg",
                                  fullWidth: 1920,
                                  fullHeight: 1080,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4Pi3W
                              )}
                            >
                              <div
                                data-plasmic-name={"greeting5"}
                                data-plasmic-override={overrides.greeting5}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting5
                                )}
                              >
                                {"youtube"}
                              </div>

                              <div
                                data-plasmic-name={"greeting6"}
                                data-plasmic-override={overrides.greeting6}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting6
                                )}
                              >
                                {
                                  "i post videos on youtube about music, gaming, and more on the disuko channel!"
                                }
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </Tilt>

                        <Tilt
                          className={classNames(
                            "__wab_instance",
                            sty.tilt__rW73
                          )}
                          glareEnable={false}
                          tiltMaxAngleX={10 as const}
                          tiltMaxAngleY={10 as const}
                          tiltReverse={true}
                          trackOnWindow={false}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__gTB
                            )}
                            component={Link}
                            href={"https://www.fiverr.com/disuko" as const}
                            platform={"nextjs"}
                            target={"_blank" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tZc1G
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___6Wf1)}
                                displayHeight={"100%" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/disuko_website_v_2/images/image20221125001647652Png.png",
                                  fullWidth: 792,
                                  fullHeight: 738,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___83Pqt
                              )}
                            >
                              <div
                                data-plasmic-name={"greeting7"}
                                data-plasmic-override={overrides.greeting7}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting7
                                )}
                              >
                                {"comissions"}
                              </div>

                              <div
                                data-plasmic-name={"greeting8"}
                                data-plasmic-override={overrides.greeting8}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting8
                                )}
                              >
                                {
                                  "i'm open for commissions on fiverr! get royalty free music for your projects starting at $75"
                                }
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </Tilt>
                      </div>
                    ) : null}
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qLtsX)}
                    >
                      <Tilt
                        className={classNames(
                          "__wab_instance",
                          sty.tilt__yjSwI
                        )}
                        glareEnable={false}
                        gyroscope={true}
                        perspective={1000 as const}
                        tiltMaxAngleX={10 as const}
                        tiltMaxAngleY={10 as const}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__gDcKz
                          )}
                          component={Link}
                          href={`/music`}
                          platform={"nextjs"}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cdPvr
                              )}
                            >
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__cyChR)}
                                  displayHeight={"100%" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"100%" as const}
                                  loading={"lazy" as const}
                                  src={{
                                    src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                    fullWidth: 640,
                                    fullHeight: 640,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ibexz
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__c9Iym)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("213px" as const)
                                  : ("100%" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"100%" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                fullWidth: 640,
                                fullHeight: 640,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              data-plasmic-name={"greeting9"}
                              data-plasmic-override={overrides.greeting9}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.greeting9
                              )}
                            >
                              {"music"}
                            </div>

                            <div
                              data-plasmic-name={"greeting10"}
                              data-plasmic-override={overrides.greeting10}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.greeting10
                              )}
                            >
                              {
                                "i release all kinds of music on spotify and other platforms!"
                              }
                            </div>
                          </div>
                        </p.PlasmicLink>
                      </Tilt>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <Tilt
                          className={classNames(
                            "__wab_instance",
                            sty.tilt___6Plsa
                          )}
                          gyroscope={true}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__yi9Ap
                            )}
                            component={Link}
                            href={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("https://youtube.com/disuko" as const)
                                : `/music`
                            }
                            platform={"nextjs"}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gSwrH
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__n4M3L)}
                                    displayHeight={"100%" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"100%" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"100%" as const}
                                    loading={"lazy" as const}
                                    src={{
                                      src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                      fullWidth: 640,
                                      fullHeight: 640,
                                      aspectRatio: undefined
                                    }}
                                  />
                                ) : null}
                              </div>
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0ASif
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__xp9M)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("213px" as const)
                                    : ("100%" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? {
                                        src: "/plasmic/disuko_website_v_2/images/videoScreenshotYouTubeMyTop5AudioGearfor2023055Jpg.jpeg",
                                        fullWidth: 1920,
                                        fullHeight: 1080,
                                        aspectRatio: undefined
                                      }
                                    : {
                                        src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                        fullWidth: 640,
                                        fullHeight: 640,
                                        aspectRatio: undefined
                                      }
                                }
                              />

                              <div
                                data-plasmic-name={"greeting15"}
                                data-plasmic-override={overrides.greeting15}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting15
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "youtube"
                                  : "music"}
                              </div>

                              <div
                                data-plasmic-name={"greeting16"}
                                data-plasmic-override={overrides.greeting16}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting16
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "i post videos on youtube about music, gaming, and more!"
                                  : "i release all kinds of music on spotify and other platforms!"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </Tilt>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <Tilt
                          className={classNames(
                            "__wab_instance",
                            sty.tilt__k8YzK
                          )}
                          gyroscope={true}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___9SW7I
                            )}
                            component={Link}
                            href={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("https://www.fiverr.com/disuko?up_rollout=true" as const)
                                : ("https://www.fiverr.com/disuko" as const)
                            }
                            platform={"nextjs"}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dr4Jt
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__zi0Pg)}
                                    displayHeight={"100%" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"100%" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"100%" as const}
                                    loading={"lazy" as const}
                                    src={{
                                      src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                      fullWidth: 640,
                                      fullHeight: 640,
                                      aspectRatio: undefined
                                    }}
                                  />
                                ) : null}
                              </div>
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__znKC
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___2OVuv)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("213px" as const)
                                    : ("100%" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? {
                                        src: "/plasmic/disuko_website_v_2/images/image20221125001647652Png.png",
                                        fullWidth: 792,
                                        fullHeight: 738,
                                        aspectRatio: undefined
                                      }
                                    : {
                                        src: "/plasmic/disuko_website_v_2/images/raspberryFieldsjpg.jpeg",
                                        fullWidth: 640,
                                        fullHeight: 640,
                                        aspectRatio: undefined
                                      }
                                }
                              />

                              <div
                                data-plasmic-name={"greeting17"}
                                data-plasmic-override={overrides.greeting17}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting17
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "commissions"
                                  : "music"}
                              </div>

                              <div
                                data-plasmic-name={"greeting18"}
                                data-plasmic-override={overrides.greeting18}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.greeting18
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "i'm open for commissions on fiverr! get royalty free music for your projects starting at $75"
                                  : "i release all kinds of music on spotify and other platforms!"}
                              </div>
                            </div>
                          </p.PlasmicLink>
                        </Tilt>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__mAk92
                          )}
                          component={Link}
                          href={"https://youtube.com/disuko" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lY06H
                              )}
                            >
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__s4JyT)}
                                  displayHeight={"100%" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"100%" as const}
                                  loading={"lazy" as const}
                                  src={{
                                    src: "/plasmic/disuko_website_v_2/images/videoScreenshotYouTubeWorththehypeMachinewisePrymaReview119Jpg.jpeg",
                                    fullWidth: 1920,
                                    fullHeight: 1080,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qnS5X
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__rbiSk)}
                              displayHeight={"100%" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"100%" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/disuko_website_v_2/images/videoScreenshotYouTubeWorththehypeMachinewisePrymaReview119Jpg.jpeg",
                                fullWidth: 1920,
                                fullHeight: 1080,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              data-plasmic-name={"greeting11"}
                              data-plasmic-override={overrides.greeting11}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.greeting11
                              )}
                            >
                              {"youtube"}
                            </div>

                            <div
                              data-plasmic-name={"greeting12"}
                              data-plasmic-override={overrides.greeting12}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.greeting12
                              )}
                            >
                              {
                                "i post videos on youtube about music, gaming, and more!"
                              }
                            </div>

                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__qich6)}
                                displayHeight={"100%" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/disuko_website_v_2/images/videoScreenshotYouTubeWorththehypeMachinewisePrymaReview119Jpg.jpeg",
                                  fullWidth: 1920,
                                  fullHeight: 1080,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                          </div>
                        </p.PlasmicLink>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__inEf
                          )}
                          component={Link}
                          href={
                            "https://www.fiverr.com/disuko?up_rollout=true" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2APpy
                              )}
                            >
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__xtY8N)}
                                  displayHeight={"100%" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"100%" as const}
                                  loading={"lazy" as const}
                                  src={{
                                    src: "/plasmic/disuko_website_v_2/images/image20221125001647652Png.png",
                                    fullWidth: 792,
                                    fullHeight: 738,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lkFy6
                            )}
                          >
                            <div
                              data-plasmic-name={"greeting13"}
                              data-plasmic-override={overrides.greeting13}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.greeting13
                              )}
                            >
                              {"comissions"}
                            </div>

                            <div
                              data-plasmic-name={"greeting14"}
                              data-plasmic-override={overrides.greeting14}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.greeting14
                              )}
                            >
                              {
                                "i'm open for commissions on fiverr! get royalty free music for your projects starting at $75"
                              }
                            </div>
                          </div>
                        </p.PlasmicLink>
                      ) : null}
                    </div>
                  ) : null}
                </Reveal>
              ) : null}

              <div
                data-plasmic-name={"contact"}
                data-plasmic-override={overrides.contact}
                className={classNames(projectcss.all, sty.contact)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vM57J
                  )}
                >
                  {"always open for inquires!"}
                </div>

                <main
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.main__a7HYo
                  )}
                >
                  {
                    "feel free to send me a message about anything you like. topics might include collaboration, usage rights, ice cream flavors, free verse poetry, etc..."
                  }
                </main>

                <p.PlasmicLink
                  data-plasmic-name={"mail"}
                  data-plasmic-override={overrides.mail}
                  className={classNames(projectcss.all, projectcss.a, sty.mail)}
                  component={Link}
                  href={"mailto:disukomusic@gmail.com" as const}
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q87Lt
                    )}
                  >
                    {"send email"}
                  </div>
                </p.PlasmicLink>
              </div>
            </p.Stack>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "reveal",
    "columns",
    "greeting",
    "greeting2",
    "socials",
    "youtube",
    "instagram",
    "twitter",
    "timeline",
    "greeting3",
    "greeting4",
    "greeting5",
    "greeting6",
    "greeting7",
    "greeting8",
    "greeting9",
    "greeting10",
    "greeting15",
    "greeting16",
    "greeting17",
    "greeting18",
    "greeting11",
    "greeting12",
    "greeting13",
    "greeting14",
    "contact",
    "mail",
    "footer"
  ],
  navbar: ["navbar"],
  reveal: [
    "reveal",
    "columns",
    "greeting",
    "greeting2",
    "socials",
    "youtube",
    "instagram",
    "twitter",
    "timeline",
    "greeting3",
    "greeting4",
    "greeting5",
    "greeting6",
    "greeting7",
    "greeting8",
    "greeting9",
    "greeting10",
    "greeting15",
    "greeting16",
    "greeting17",
    "greeting18",
    "greeting11",
    "greeting12",
    "greeting13",
    "greeting14"
  ],
  columns: [
    "columns",
    "greeting",
    "greeting2",
    "socials",
    "youtube",
    "instagram",
    "twitter",
    "timeline",
    "greeting3",
    "greeting4",
    "greeting5",
    "greeting6",
    "greeting7",
    "greeting8"
  ],
  greeting: ["greeting"],
  greeting2: ["greeting2"],
  socials: ["socials", "youtube", "instagram", "twitter"],
  youtube: ["youtube"],
  instagram: ["instagram"],
  twitter: ["twitter"],
  timeline: ["timeline"],
  greeting3: ["greeting3"],
  greeting4: ["greeting4"],
  greeting5: ["greeting5"],
  greeting6: ["greeting6"],
  greeting7: ["greeting7"],
  greeting8: ["greeting8"],
  greeting9: ["greeting9"],
  greeting10: ["greeting10"],
  greeting15: ["greeting15"],
  greeting16: ["greeting16"],
  greeting17: ["greeting17"],
  greeting18: ["greeting18"],
  greeting11: ["greeting11"],
  greeting12: ["greeting12"],
  greeting13: ["greeting13"],
  greeting14: ["greeting14"],
  contact: ["contact", "mail"],
  mail: ["mail"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  reveal: typeof Reveal;
  columns: "div";
  greeting: "div";
  greeting2: "div";
  socials: "div";
  youtube: "a";
  instagram: "a";
  twitter: "a";
  timeline: typeof TimelineWrapper;
  greeting3: "div";
  greeting4: "div";
  greeting5: "div";
  greeting6: "div";
  greeting7: "div";
  greeting8: "div";
  greeting9: "div";
  greeting10: "div";
  greeting15: "div";
  greeting16: "div";
  greeting17: "div";
  greeting18: "div";
  greeting11: "div";
  greeting12: "div";
  greeting13: "div";
  greeting14: "div";
  contact: "div";
  mail: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    reveal: makeNodeComponent("reveal"),
    columns: makeNodeComponent("columns"),
    greeting: makeNodeComponent("greeting"),
    greeting2: makeNodeComponent("greeting2"),
    socials: makeNodeComponent("socials"),
    youtube: makeNodeComponent("youtube"),
    instagram: makeNodeComponent("instagram"),
    twitter: makeNodeComponent("twitter"),
    timeline: makeNodeComponent("timeline"),
    greeting3: makeNodeComponent("greeting3"),
    greeting4: makeNodeComponent("greeting4"),
    greeting5: makeNodeComponent("greeting5"),
    greeting6: makeNodeComponent("greeting6"),
    greeting7: makeNodeComponent("greeting7"),
    greeting8: makeNodeComponent("greeting8"),
    greeting9: makeNodeComponent("greeting9"),
    greeting10: makeNodeComponent("greeting10"),
    greeting15: makeNodeComponent("greeting15"),
    greeting16: makeNodeComponent("greeting16"),
    greeting17: makeNodeComponent("greeting17"),
    greeting18: makeNodeComponent("greeting18"),
    greeting11: makeNodeComponent("greeting11"),
    greeting12: makeNodeComponent("greeting12"),
    greeting13: makeNodeComponent("greeting13"),
    greeting14: makeNodeComponent("greeting14"),
    contact: makeNodeComponent("contact"),
    mail: makeNodeComponent("mail"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko 🌸",
      description:
        "~official website for music producer and content creator disuko ",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
