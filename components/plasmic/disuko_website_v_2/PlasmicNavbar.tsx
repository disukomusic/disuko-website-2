// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bsHvoheJaXyaeWhnCxRakT
// Component: _De9lHvhQM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_disuko_website_v_2.module.css"; // plasmic-import: bsHvoheJaXyaeWhnCxRakT/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: _De9lHvhQM/css

import Menu2SvgIcon from "./icons/PlasmicIcon__Menu2Svg"; // plasmic-import: Oge_6sYsD-/icon
import XsvgIcon from "./icons/PlasmicIcon__Xsvg"; // plasmic-import: LUQvvF4qlM/icon
import HomesvgIcon from "./icons/PlasmicIcon__Homesvg"; // plasmic-import: L0zI9S_Iq6/icon
import HeadphonessvgIcon from "./icons/PlasmicIcon__Headphonessvg"; // plasmic-import: yb2-zw2oZD/icon
import ShirtsvgIcon from "./icons/PlasmicIcon__Shirtsvg"; // plasmic-import: BmJEOaCAlD/icon
import LinksvgIcon from "./icons/PlasmicIcon__Linksvg"; // plasmic-import: CChSiJgS1z/icon

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<typeof NavigationBar>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  home?: p.Flex<"a"> & Partial<LinkProps>;
  music?: p.Flex<"a"> & Partial<LinkProps>;
  merch?: p.Flex<"a"> & Partial<LinkProps>;
  links?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavbarProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={`/`}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"40px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            src={{
              src: "/plasmic/disuko_website_v_2/images/disukoText1Png.png",
              fullWidth: 2527,
              fullHeight: 691,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>
      }
      className={classNames("__wab_instance", sty.root)}
      closeButton={
        <XsvgIcon
          className={classNames(projectcss.all, sty.svg__iFv33)}
          role={"img"}
        />
      }
      itemsGap={8 as const}
      menuItems={
        <React.Fragment>
          <p.PlasmicLink
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames(projectcss.all, projectcss.a, sty.home)}
            component={Link}
            href={`/`}
            platform={"nextjs"}
            title={"home" as const}
          >
            <HomesvgIcon
              className={classNames(projectcss.all, sty.svg___3MZqc)}
              role={"img"}
            />
          </p.PlasmicLink>

          <p.PlasmicLink
            data-plasmic-name={"music"}
            data-plasmic-override={overrides.music}
            className={classNames(projectcss.all, projectcss.a, sty.music)}
            component={Link}
            href={`/music`}
            platform={"nextjs"}
            title={"home" as const}
          >
            <HeadphonessvgIcon
              className={classNames(projectcss.all, sty.svg__r4C8D)}
              role={"img"}
            />
          </p.PlasmicLink>

          <p.PlasmicLink
            data-plasmic-name={"merch"}
            data-plasmic-override={overrides.merch}
            className={classNames(projectcss.all, projectcss.a, sty.merch)}
            component={Link}
            href={"https://merch.disuko.gay" as const}
            platform={"nextjs"}
            title={"merch" as const}
          >
            <ShirtsvgIcon
              className={classNames(projectcss.all, sty.svg__b6MrX)}
              role={"img"}
            />
          </p.PlasmicLink>

          {true ? (
            <p.PlasmicLink
              data-plasmic-name={"links"}
              data-plasmic-override={overrides.links}
              className={classNames(projectcss.all, projectcss.a, sty.links)}
              component={Link}
              href={`/links`}
              platform={"nextjs"}
              title={"merch" as const}
            >
              <LinksvgIcon
                className={classNames(projectcss.all, sty.svg__kcwLa)}
                role={"img"}
              />
            </p.PlasmicLink>
          ) : null}
        </React.Fragment>
      }
      openButton={
        <Menu2SvgIcon
          className={classNames(projectcss.all, sty.svg__avTvi)}
          role={"img"}
        />
      }
      responsiveBreakpoint={768 as const}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "img", "home", "music", "merch", "links"],
  link: ["link", "img"],
  img: ["img"],
  home: ["home"],
  music: ["music"],
  merch: ["merch"],
  links: ["links"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  link: "a";
  img: typeof p.PlasmicImg;
  home: "a";
  music: "a";
  merch: "a";
  links: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    home: makeNodeComponent("home"),
    music: makeNodeComponent("music"),
    merch: makeNodeComponent("merch"),
    links: makeNodeComponent("links"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
