// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bsHvoheJaXyaeWhnCxRakT
// Component: c8IRUFkDBuD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: _De9lHvhQM/component
import { Video } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: RhitNJW5Zu-/codeComponent
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import Footer from "../../Footer"; // plasmic-import: phAOjgqEmd/component

import { useScreenVariants as useScreenVariantswajuQ4R1DeAga } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WajuQ4R1DeAga/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_disuko_website_v_2.module.css"; // plasmic-import: bsHvoheJaXyaeWhnCxRakT/projectcss
import sty from "./PlasmicPortfolio.module.css"; // plasmic-import: c8IRUFkDBuD/css

export type PlasmicPortfolio__VariantMembers = {};
export type PlasmicPortfolio__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolio__VariantsArgs;
export const PlasmicPortfolio__VariantProps = new Array<VariantPropType>();

export type PlasmicPortfolio__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolio__ArgsType;
export const PlasmicPortfolio__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolio__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  main?: p.Flex<"div">;
  headshot?: p.Flex<typeof p.PlasmicImg>;
  span?: p.Flex<"span">;
  columns?: p.Flex<"div">;
  music?: p.Flex<"div">;
  officialReleases?: p.Flex<"div">;
  flStudio?: p.Flex<"div">;
  abletonLive?: p.Flex<"div">;
  livePerformance?: p.Flex<"div">;
  comissions?: p.Flex<"div">;
  renders?: p.Flex<"div">;
  pastelStreet?: p.Flex<typeof Video>;
  gameboyRender?: p.Flex<typeof Video>;
  hexWorld?: p.Flex<typeof Video>;
  psycadelic?: p.Flex<typeof Video>;
  htmlVideo?: p.Flex<typeof Video>;
  assets?: p.Flex<"div">;
  graphicDesign?: p.Flex<"div">;
  disuko?: p.Flex<"div">;
  disuktwo?: p.Flex<"div">;
  disukoFlips?: p.Flex<"div">;
  redPandaStudios?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPortfolioProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolio__RenderFunc(props: {
  variants: PlasmicPortfolio__VariantsArgs;
  args: PlasmicPortfolio__ArgsType;
  overrides: PlasmicPortfolio__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswajuQ4R1DeAga()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPortfolio.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPortfolio.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPortfolio.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPortfolio.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPortfolio.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicPortfolio.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <p.PlasmicImg
              data-plasmic-name={"headshot"}
              data-plasmic-override={overrides.headshot}
              alt={""}
              className={classNames(sty.headshot)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("194px" as const)
                  : ("329px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("127.05%" as const)
                  : ("40.36%" as const)
              }
              loading={"eager" as const}
              src={{
                src: "/plasmic/disuko_website_v_2/images/headshotTingpng.png",
                fullWidth: 2155,
                fullHeight: 1616,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qnnu7
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Angelo Licavoli"}
                </span>
              </React.Fragment>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__odBgF
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {"music producer, creative digital media enthusiast\n~\n"}
                </React.Fragment>
                {
                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span
                    )}
                  >
                    {
                      "Chatham university - immersive media major, music technology minor"
                    }
                  </span>
                }
                <React.Fragment>{"\n~\ndisukomusic@gmail.com"}</React.Fragment>
              </React.Fragment>
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div
              data-plasmic-name={"music"}
              data-plasmic-override={overrides.music}
              className={classNames(projectcss.all, sty.music)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yRmSt)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__uh2Ud
                  )}
                  component={Link}
                  href={`/music`}
                  platform={"nextjs"}
                  target={"_blank" as const}
                  title={"disuko.gay/music" as const}
                >
                  {"Music"}
                </p.PlasmicLink>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hbZih
                  )}
                >
                  {
                    "I've worked on a variety of electronic music compositions, and also have experience with live sound mixing and production for more common genres. On top of production, I DJ for various events. I also play jazz piano."
                  }
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"officialReleases"}
                    data-plasmic-override={overrides.officialReleases}
                    className={classNames(projectcss.all, sty.officialReleases)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__pjjmE
                      )}
                      component={Link}
                      href={`/music`}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Disuko (Music Releases)"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__wgZl1
                      )}
                      component={Link}
                      href={`/music`}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__uj73P)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/disuko_website_v_2/images/mixerpng.png",
                          fullWidth: 1597,
                          fullHeight: 418,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"flStudio"}
                    data-plasmic-override={overrides.flStudio}
                    className={classNames(projectcss.all, sty.flStudio)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__fCvtk
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/@Disuko/playlists?view=71&shelf_id=3" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"FL Studio"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__beMs4
                      )}
                    >
                      {"for sequencing"}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___6PrN
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/@Disuko/playlists?view=71&shelf_id=3" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__frcGb)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/disuko_website_v_2/images/catJazzjpg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"abletonLive"}
                    data-plasmic-override={overrides.abletonLive}
                    className={classNames(projectcss.all, sty.abletonLive)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__ljnOx
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/@Disuko/playlists?view=71&shelf_id=3" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Ableton Live"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2PXz5
                      )}
                    >
                      {"for MIDI performance"}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__f8Tkz
                      )}
                      component={Link}
                      href={`/music`}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__mhQow)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/disuko_website_v_2/images/image20230303170212160Png.png",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"livePerformance"}
                    data-plasmic-override={overrides.livePerformance}
                    className={classNames(projectcss.all, sty.livePerformance)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__bU1M
                      )}
                      component={Link}
                      href={"https://youtu.be/l6Bh6fn8x5c" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Live Performance"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__scttE
                      )}
                      component={Link}
                      href={"https://youtu.be/l6Bh6fn8x5c" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__is3J8)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/disuko_website_v_2/images/angeloDJingjpg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"comissions"}
                    data-plasmic-override={overrides.comissions}
                    className={classNames(projectcss.all, sty.comissions)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__n2AcL
                      )}
                      component={Link}
                      href={
                        "https://www.fiverr.com/disuko/produce-electronic-music-for-indie-games-short-films-etc?context_referrer=user_page&ref_ctx_id=b93ba630649a96d54b28a044e6ef440f&pckg_id=1&pos=1&imp_id=d0be2ad9-23a5-465f-849a-824f98300717" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Commissions"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__koOoD
                      )}
                      component={Link}
                      href={
                        "https://www.fiverr.com/disuko/produce-electronic-music-for-indie-games-short-films-etc?context_referrer=user_page&ref_ctx_id=b93ba630649a96d54b28a044e6ef440f&pckg_id=1&pos=1&imp_id=d0be2ad9-23a5-465f-849a-824f98300717" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__qcLAw)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/disuko_website_v_2/images/fiiverrjpg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </div>
                ) : null}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__bdS9X)}>
              <div className={classNames(projectcss.all, sty.freeBox__peJv)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__uCCuI
                  )}
                  component={Link}
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  {"3D + 2D Art"}
                </p.PlasmicLink>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yNory
                  )}
                >
                  {
                    "I love using computer software to make artwork! A lot of my work is made in Blender, an open source 3D modelling and rendering software. I also enjoy designing branding imagery in Adobe Photoshop, Illustrator, and Indesign. Currently, I am learning how to use the game engine Unity for use in immersive experiences."
                  }
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"renders"}
                    data-plasmic-override={overrides.renders}
                    className={classNames(projectcss.all, sty.renders)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__h3RwO
                      )}
                      component={Link}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Blender Renders"}
                    </p.PlasmicLink>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sg8Ng
                        )}
                      >
                        {true ? (
                          <Video
                            data-plasmic-name={"pastelStreet"}
                            data-plasmic-override={overrides.pastelStreet}
                            autoPlay={true}
                            className={classNames(
                              "__wab_instance",
                              sty.pastelStreet
                            )}
                            controls={false}
                            loop={true}
                            muted={true}
                            playsInline={false}
                            poster={
                              "/plasmic/disuko_website_v_2/images/_0001Png.png"
                            }
                            preload={"auto" as const}
                            src={
                              "https://www.dropbox.com/s/b4kixg8m5b3v0hs/animestreet.mp4?dl=1" as const
                            }
                          />
                        ) : null}

                        <Video
                          data-plasmic-name={"gameboyRender"}
                          data-plasmic-override={overrides.gameboyRender}
                          autoPlay={true}
                          className={classNames(
                            "__wab_instance",
                            sty.gameboyRender
                          )}
                          controls={false}
                          loop={true}
                          muted={true}
                          playsInline={false}
                          poster={
                            "/plasmic/disuko_website_v_2/images/gbcBulb0001Png.png"
                          }
                          preload={"auto" as const}
                          src={
                            "https://www.dropbox.com/s/e1ziae5gafw4exn/finalrendercompressed.mp4?dl=1" as const
                          }
                        />
                      </div>
                    ) : null}

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gU0Gy)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/disuko_website_v_2/images/image16.png",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7PyKc
                        )}
                      >
                        <Video
                          data-plasmic-name={"hexWorld"}
                          data-plasmic-override={overrides.hexWorld}
                          autoPlay={true}
                          className={classNames("__wab_instance", sty.hexWorld)}
                          controls={false}
                          loop={true}
                          muted={true}
                          playsInline={false}
                          poster={
                            "/plasmic/disuko_website_v_2/images/hexworld0001Jpg.jpeg"
                          }
                          preload={"auto" as const}
                          src={
                            "https://www.dropbox.com/s/ipah227ds6f4gtq/HexWorldEasel%20.mp4?dl=1" as const
                          }
                        />

                        <Video
                          data-plasmic-name={"psycadelic"}
                          data-plasmic-override={overrides.psycadelic}
                          autoPlay={true}
                          className={classNames(
                            "__wab_instance",
                            sty.psycadelic
                          )}
                          controls={false}
                          loop={true}
                          muted={true}
                          playsInline={false}
                          poster={
                            "/plasmic/disuko_website_v_2/images/pyscway0001Png.png"
                          }
                          preload={"auto" as const}
                          src={
                            "https://www.dropbox.com/s/61g4z2hjxrgqeky/Nodevember%20Psycadelic%20Alleyway0001-0499.mp4?dl=1" as const
                          }
                        />
                      </div>
                    ) : null}

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__m6K9M)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/disuko_website_v_2/images/image17.png",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />

                    <Video
                      data-plasmic-name={"htmlVideo"}
                      data-plasmic-override={overrides.htmlVideo}
                      autoPlay={true}
                      className={classNames("__wab_instance", sty.htmlVideo)}
                      controls={false}
                      loop={true}
                      poster={"/plasmic/disuko_website_v_2/images/_0126Png.png"}
                      src={
                        "https://www.dropbox.com/s/vmh1rt43c7z5ux7/DreamDepot0001-0250.mp4?dl=1" as const
                      }
                    />
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"assets"}
                    data-plasmic-override={overrides.assets}
                    className={classNames(projectcss.all, sty.assets)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__plcDi
                      )}
                      component={Link}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Procedural Assets"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__am2Ye
                      )}
                    >
                      {"w/ Blender Nodes"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__tGemT)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tAhhW
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__aXlO)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image2.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cPukA)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image3.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___6U1Ss)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image4.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__te6Fb)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image8.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zHsKy
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hk1L)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image5.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nmyf2)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image6.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ekFCj)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image7.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__n4Iz)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image9.png",
                            fullWidth: 1920,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"graphicDesign"}
                    data-plasmic-override={overrides.graphicDesign}
                    className={classNames(projectcss.all, sty.graphicDesign)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__cIt9L
                      )}
                      component={Link}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Graphic Design"}
                    </p.PlasmicLink>

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__xIlPx)}
                      displayHeight={"185px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"95%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/disuko_website_v_2/images/image13.png",
                        fullWidth: 2660,
                        fullHeight: 1995,
                        aspectRatio: undefined
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__bH7BP)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"95%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/disuko_website_v_2/images/image12.png",
                        fullWidth: 1500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___438Vn
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eu1EY
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nRXc)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/logo2023Png.png",
                            fullWidth: 2000,
                            fullHeight: 2000,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___0PJi4)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image15.png",
                            fullWidth: 955,
                            fullHeight: 284,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ewWWo)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image14.png",
                            fullWidth: 2000,
                            fullHeight: 2000,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__wJgFo)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/rpsLogopng.png",
                            fullWidth: 1266,
                            fullHeight: 269,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nshY)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/ggjIconpng.png",
                            fullWidth: 1024,
                            fullHeight: 1024,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__u1Qcn
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mxJb3)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/image11.jpeg",
                            fullWidth: 342,
                            fullHeight: 342,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__munIs)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/immLogoPng.png",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__bP6Y1)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/ddsLogopng.png",
                            fullWidth: 2075,
                            fullHeight: 963,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__zfFr)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/disuko_website_v_2/images/oldLogopng.png",
                            fullWidth: 3000,
                            fullHeight: 3000,
                            aspectRatio: undefined
                          }}
                        />

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eDIeB
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__ovBal)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/disuko_website_v_2/images/disukoFlippingLogopng.png",
                                fullWidth: 2490,
                                fullHeight: 1476,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        ) : null}
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__hirUf)}>
              <div className={classNames(projectcss.all, sty.freeBox__aKxX9)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__aexRt
                  )}
                  component={Link}
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  {"Video / Film"}
                </p.PlasmicLink>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q2Wgj
                  )}
                >
                  {
                    "I've always been interested in video and film production. Specifically, I've been uploading videos on YouTube to 4 different channels for nearly a decade now! I mainly edit using Adobe Premiere and After Effects. My main camera is a Canon EOS m10."
                  }
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"disuko"}
                    data-plasmic-override={overrides.disuko}
                    className={classNames(projectcss.all, sty.disuko)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__swL92
                      )}
                      component={Link}
                      href={"https://www.youtube.com/disuko" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Disuko (Youtube Channel)"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mS0Ap
                      )}
                    >
                      {"My channel for audio and music related content."}
                    </div>

                    <YouTube
                      className={classNames(
                        "__wab_instance",
                        sty.youTube__cj3Jq
                      )}
                      videoId={"4nzDNPGY_rg" as const}
                    />
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"disuktwo"}
                    data-plasmic-override={overrides.disuktwo}
                    className={classNames(projectcss.all, sty.disuktwo)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__weUd5
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/channel/UChbWqSpEEafV9HpCfPs5pmQ" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Disuktwo"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vjPs
                      )}
                    >
                      {"Casual channel for short film projects."}
                    </div>

                    <YouTube
                      className={classNames(
                        "__wab_instance",
                        sty.youTube__yaLsK
                      )}
                      modestbranding={false}
                      mute={false}
                      videoId={"zTb674YmoM4" as const}
                    />
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"disukoFlips"}
                    data-plasmic-override={overrides.disukoFlips}
                    className={classNames(projectcss.all, sty.disukoFlips)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__nwWDs
                      )}
                      component={Link}
                      href={"https://www.youtube.com/@disukoflips" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Disuko Flips"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iHvB
                      )}
                    >
                      {
                        "My channel for balisong butterfly knife related content."
                      }
                    </div>

                    <YouTube
                      className={classNames(
                        "__wab_instance",
                        sty.youTube___1Zidu
                      )}
                      modestbranding={false}
                      mute={false}
                      videoId={"i2aXYuyAnag?t=344" as const}
                    />
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"redPandaStudios"}
                    data-plasmic-override={overrides.redPandaStudios}
                    className={classNames(projectcss.all, sty.redPandaStudios)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__kaEh
                      )}
                      component={Link}
                      href={"https://redpandamedia.net" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Red Panda Studios"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___782Ib
                      )}
                    >
                      {
                        "Channel for collaborative projects including game trailers, animations, and more."
                      }
                    </div>

                    <YouTube
                      className={classNames(
                        "__wab_instance",
                        sty.youTube__vGjHn
                      )}
                      modestbranding={false}
                      mute={false}
                      videoId={"fgJZq3t5ewI" as const}
                    />
                  </div>
                ) : null}
              </div>
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "main",
    "headshot",
    "span",
    "columns",
    "music",
    "officialReleases",
    "flStudio",
    "abletonLive",
    "livePerformance",
    "comissions",
    "renders",
    "pastelStreet",
    "gameboyRender",
    "hexWorld",
    "psycadelic",
    "htmlVideo",
    "assets",
    "graphicDesign",
    "disuko",
    "disuktwo",
    "disukoFlips",
    "redPandaStudios",
    "footer"
  ],
  navbar: ["navbar"],
  main: ["main", "headshot", "span"],
  headshot: ["headshot"],
  span: ["span"],
  columns: [
    "columns",
    "music",
    "officialReleases",
    "flStudio",
    "abletonLive",
    "livePerformance",
    "comissions",
    "renders",
    "pastelStreet",
    "gameboyRender",
    "hexWorld",
    "psycadelic",
    "htmlVideo",
    "assets",
    "graphicDesign",
    "disuko",
    "disuktwo",
    "disukoFlips",
    "redPandaStudios"
  ],
  music: [
    "music",
    "officialReleases",
    "flStudio",
    "abletonLive",
    "livePerformance",
    "comissions"
  ],
  officialReleases: ["officialReleases"],
  flStudio: ["flStudio"],
  abletonLive: ["abletonLive"],
  livePerformance: ["livePerformance"],
  comissions: ["comissions"],
  renders: [
    "renders",
    "pastelStreet",
    "gameboyRender",
    "hexWorld",
    "psycadelic",
    "htmlVideo"
  ],
  pastelStreet: ["pastelStreet"],
  gameboyRender: ["gameboyRender"],
  hexWorld: ["hexWorld"],
  psycadelic: ["psycadelic"],
  htmlVideo: ["htmlVideo"],
  assets: ["assets"],
  graphicDesign: ["graphicDesign"],
  disuko: ["disuko"],
  disuktwo: ["disuktwo"],
  disukoFlips: ["disukoFlips"],
  redPandaStudios: ["redPandaStudios"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  main: "div";
  headshot: typeof p.PlasmicImg;
  span: "span";
  columns: "div";
  music: "div";
  officialReleases: "div";
  flStudio: "div";
  abletonLive: "div";
  livePerformance: "div";
  comissions: "div";
  renders: "div";
  pastelStreet: typeof Video;
  gameboyRender: typeof Video;
  hexWorld: typeof Video;
  psycadelic: typeof Video;
  htmlVideo: typeof Video;
  assets: "div";
  graphicDesign: "div";
  disuko: "div";
  disuktwo: "div";
  disukoFlips: "div";
  redPandaStudios: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolio__VariantsArgs;
    args?: PlasmicPortfolio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPortfolio__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPortfolio__ArgProps,
          internalVariantPropNames: PlasmicPortfolio__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolio";
  } else {
    func.displayName = `PlasmicPortfolio.${nodeName}`;
  }
  return func;
}

export const PlasmicPortfolio = Object.assign(
  // Top-level PlasmicPortfolio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    headshot: makeNodeComponent("headshot"),
    span: makeNodeComponent("span"),
    columns: makeNodeComponent("columns"),
    music: makeNodeComponent("music"),
    officialReleases: makeNodeComponent("officialReleases"),
    flStudio: makeNodeComponent("flStudio"),
    abletonLive: makeNodeComponent("abletonLive"),
    livePerformance: makeNodeComponent("livePerformance"),
    comissions: makeNodeComponent("comissions"),
    renders: makeNodeComponent("renders"),
    pastelStreet: makeNodeComponent("pastelStreet"),
    gameboyRender: makeNodeComponent("gameboyRender"),
    hexWorld: makeNodeComponent("hexWorld"),
    psycadelic: makeNodeComponent("psycadelic"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    assets: makeNodeComponent("assets"),
    graphicDesign: makeNodeComponent("graphicDesign"),
    disuko: makeNodeComponent("disuko"),
    disuktwo: makeNodeComponent("disuktwo"),
    disukoFlips: makeNodeComponent("disukoFlips"),
    redPandaStudios: makeNodeComponent("redPandaStudios"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPortfolio
    internalVariantProps: PlasmicPortfolio__VariantProps,
    internalArgProps: PlasmicPortfolio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - portfolio🌸",
      description:
        "~all of my completed /ongoing work, including music, 3D, design, and video.",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/portfolio"
    }
  }
);

export default PlasmicPortfolio;
/* prettier-ignore-end */
